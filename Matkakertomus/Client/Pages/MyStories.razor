@page "/mytrips/{id}/mystories"
@using System.Net.Http.Json
@inject HttpClient HttpClient
@inject NavigationManager NavigationManager
@inject ISnackbar Snackbar
@inject IDialogService DialogService
@using Matkakertomus.Shared


<PageTitle>Tarinat ja kuvat</PageTitle>

<MudContainer MaxWidth="MaxWidth.Medium" Class="pa-4 mr-16">
    <EditForm Model="storyDto" OnValidSubmit="@HandleValidSubmit">
        <DataAnnotationsValidator />
        <MudCard>
            <MudCardContent Style="background-color:darkgray">
                @*<MudTextField Label="Tarinan otsikko" @bind-Value="storyDto.Title" For="@(() => storyDto.Title)" />*@
                <MudDatePicker Label="Tarinan pvm" @bind-Date="storyDto.Date" For="@(() => storyDto.Date)" Required="true" />
                <MudTextField Label="Tarina" Lines="20" @bind-Value="storyDto.Text" For="@(() => storyDto.Text)" Required="true" />
                <MudSelect @bind-SelectedValue="selectedDestinationId" ValueChanged="(uint value) => HandleDestinationSelection(value)" Label="Matkakohde" Required="true" AnchorOrigin="Origin.BottomCenter">
                    @foreach (var destination in destinations)
                    {
                        <MudSelectItem Value="@destination.DestinationId">@destination.DestinationName</MudSelectItem>
                    }
                </MudSelect>
            </MudCardContent>
            <MudCardActions Style="background-color:darkgray">
                <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto">Lisää tarina</MudButton>
            </MudCardActions>
        </MudCard>
    </EditForm>
</MudContainer>

<MudContainer MaxWidth="MaxWidth.Large" Class="pa-4">
    <MudGrid Spacing="5">

        @if (storyDtos is not null && selectedDestination is not null)
        {
            @foreach (var story in storyDtos)
            {

                <MudItem Style="min-width: 400px">
                    <MudCard Style="max-width: 360px">
                        <MudCardHeader>
                            <CardHeaderContent>
                                <MudText Typo="Typo.body2">@selectedDestination.DestinationName</MudText>
                                <MudText Typo="Typo.body2">@Convert.ToDateTime(story.Date).ToString("dd/MM/yyyy")</MudText>
                            </CardHeaderContent>
                        </MudCardHeader>
                        <MudCardMedia Image="@BytesToBase64Image(selectedDestination.Image)" Height="300" />
                        <MudCardContent Style="background-color:darkgray">
                            @*<MudText Typo="Typo.h5">@story.Title</MudText>*@

                            <MudText Typo="Typo.body2">@story.DestinationId.ToString()</MudText>

                            <MudText Typo="Typo.caption" Style="word-wrap: break-word">@story.Text</MudText>
                        </MudCardContent>
                        <MudCardActions Style="background-color:darkgray">
                            <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto" @onclick="@(() => EditObject(story.StoryId))">Muokkaa</MudButton>
                            <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto" @onclick="@(() => Images(story.StoryId))">Kuvat</MudButton>
                            <MudSpacer />
                            @*<MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Error" @onclick="@(() => DeleteObject(story.StoryId))">Poista</MudButton>*@
                            <MudButton Variant="Variant.Text" Color="Color.Error" OnClick="@((e) => DeleteObject(story.StoryId))">Poista</MudButton>
                        </MudCardActions>
                    </MudCard>
                </MudItem>

            }
        }
    </MudGrid>
</MudContainer>


@code {
    [Parameter]
    public string? Id { get; set; }
    private bool IsDialogOpen { get; set; }
    private uint selectedDestinationId;
    string ImageUri;
    List<StoryDto>? storyDtos = new();
    List<DestinationDto>? destinations = new();
    TripDto? trip = new TripDto();
    StoryDto storyDto = new StoryDto();
    DestinationDto? selectedDestination = new DestinationDto();


    protected override async Task OnInitializedAsync()
    {
        storyDtos = await HttpClient.GetFromJsonAsync<List<StoryDto>>($"api/Stories/{Id}/?tripId={Convert.ToUInt32(Id)}");
        //storyDtos = await HttpClient.GetFromJsonAsync<List<StoryDto>>("api/Stories");
        destinations = await HttpClient.GetFromJsonAsync<List<DestinationDto>>("api/Destinations");

        if (storyDtos is not null)
        {
            var vstoryDto = storyDtos.FirstOrDefault(t => t.TripId == Convert.ToUInt32(Id));
            if (vstoryDto is not null && destinations is not null)
            {
                selectedDestination = destinations.FirstOrDefault(t => t.DestinationId == vstoryDto.DestinationId);
            }
        }
    }



    private async Task HandleValidSubmit()
    {
        storyDto.TripId = Convert.ToUInt32(Id);
        storyDto.DestinationId = selectedDestinationId;
        if (selectedDestinationId > 0)
        {
            var response = await HttpClient.PostAsJsonAsync("api/Stories", storyDto);
            Snackbar.Add("Tarinan lisäys onnistui", Severity.Success);
            if (!response.IsSuccessStatusCode)
            {
                using HttpContent content = response.Content;
                string responseFromServer = await content.ReadAsStringAsync();
                Snackbar.Add(responseFromServer, Severity.Error);
                return;
            }
        }
        else
        {
            Snackbar.Add("Täytä tekstikentät ja valitse matkakohde", Severity.Warning);
        }
        storyDto = new();
        // Ylhäälle ilmoitus onnistuneesta operaatiosta
        storyDtos = await HttpClient.GetFromJsonAsync<List<StoryDto>>($"api/Stories/{Id}/?tripId={Convert.ToUInt32(Id)}");
        //NavigationManager.NavigateTo(NavigationManager.Uri, forceLoad: true);

    }
    private async Task DeleteObject(uint id)
    {
        var dialog = await DialogService.ShowAsync<StoriesDialog>("Halutako varmasti poistaa tarinan?");
        var result = await dialog.Result;
        if (!result.Cancelled)
        {
            await HttpClient.DeleteAsync("api/Stories/" + id);
            Snackbar.Add("Tarinan poistaminen onnistui", Severity.Success);
        }

        storyDtos = await HttpClient.GetFromJsonAsync<List<StoryDto>>($"api/Stories/{Id}/?tripId={Convert.ToUInt32(Id)}");

        //NavigationManager.NavigateTo(NavigationManager.Uri, forceLoad: true);
    }
    private async Task EditObject(uint id)
    {
        NavigationManager.NavigateTo("/mystories/" + id);
    }
    private async Task AddStories(uint id)
    {
        NavigationManager.NavigateTo("mytrips/" + id + "/mystories");
    }
    private async Task Images(uint id)
    {
        NavigationManager.NavigateTo("mystories/" + id + "/images");
    }
    private void HandleDestinationSelection(uint destinationId)
    {
        selectedDestinationId = destinationId;
        // Do something with the selectedDestinationId
    }

    // Image stuff
    private async Task LoadImage(IBrowserFile file)
    {
        using Stream imageStream = file.OpenReadStream(1024 * 1024 * 10);

        using MemoryStream ms = new();
        await imageStream.CopyToAsync(ms);
        var asBytes = ms.ToArray();

        ImageUri = $"data:image/png;base64,{Convert.ToBase64String(asBytes)}";
        selectedDestination.Image = asBytes;
        StateHasChanged();
    }

    private string BytesToBase64Image(byte[] bytes)
    {
        if (bytes is null) return "";
        return $"data:image/png;base64,{Convert.ToBase64String(bytes)}";
    }
}
