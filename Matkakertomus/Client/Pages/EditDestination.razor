@page "/destinations/{id}"
@using System.Net.Http.Json
@inject HttpClient HttpClient
@inject NavigationManager NavigationManager
@inject ISnackbar Snackbar
@using Matkakertomus.Shared


@if (destinationDto is not null)
{
    <MudContainer MaxWidth="MaxWidth.Medium" Class="pa-4">
        <MudText Typo="Typo.h2" Class="mb-4" Align="Align.Center">Muokkaa Matkakohdetta</MudText>

        <EditForm Model="destinationDto" OnValidSubmit="@HandleValidSubmit">
            <DataAnnotationsValidator />
            <MudCard>

                <MudCardContent Style="background-color:darkgray">
                    <MudTextField Label="Matkakohteen nimi" @bind-Value="destinationDto.DestinationName" For="@(() => destinationDto.DestinationName)" Required="true" RequiredError="Pakollinen kenttä!"/>
                    <MudTextField Label="Maa" @bind-Value="destinationDto.Country" For="@(() => destinationDto.Country)" Required="true" RequiredError="Pakollinen kenttä!"/>
                    <MudTextField Label="Paikkakunta" @bind-Value="destinationDto.Area" For="@(() => destinationDto.Area)" Required="true" RequiredError="Pakollinen kenttä!"/>
                    <MudTextField Label="Kuvaus" Class="mt-3" @bind-Value="destinationDto.Description" For="@(() => destinationDto.Description)" />
                    <MudStack Style="background-color:darkgray; margin-top: 12px" Row="true">
                        <MudAvatar Size="Size.Large" Image="@ImageUri"></MudAvatar>
                        <MudFileUpload T="IBrowserFile" FilesChanged="LoadImage">
                            <ButtonTemplate Context="context_">
                                <MudButton HtmlTag="label"
                                       Variant="Variant.Filled"
                                       Color="Color.Primary"
                                       StartIcon="@Icons.Material.Filled.CloudUpload"
                                           for="@context_">
                                    Lisää kuva
                                </MudButton>
                            </ButtonTemplate>
                        </MudFileUpload>
                    </MudStack>
                </MudCardContent>

                <MudCardActions Style="background-color:darkgray">
                    <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto">Tallenna matkakohde</MudButton>
                </MudCardActions>
            </MudCard>
        </EditForm>
    </MudContainer>
}
@code {
    [Parameter]
    public string? Id { get; set; }

    string ImageUri;
    DestinationDto? destinationDto;

    protected override async Task OnInitializedAsync()
    {
        destinationDto = await HttpClient.GetFromJsonAsync<DestinationDto>("api/Destinations/" + Id);
        ImageUri = BytesToBase64Image(destinationDto?.Image);
    }

    private async Task HandleValidSubmit()
    {

        if (!string.IsNullOrEmpty(destinationDto.DestinationName) && !string.IsNullOrEmpty(destinationDto.Country) && !string.IsNullOrEmpty(destinationDto.Area))
        {

            var response = await HttpClient.PutAsJsonAsync("api/Destinations/" + Id, destinationDto);
            
            if (!response.IsSuccessStatusCode)
            {
                using HttpContent content = response.Content;
                string responseFromServer = await content.ReadAsStringAsync();
                Snackbar.Add(responseFromServer, Severity.Error);
                return;
            }
            else
            {
                Snackbar.Add("Matkakohteen muokkaus onnistui", Severity.Success);// Ylhäälle ilmoitus onnistuneesta operaatiosta
                NavigationManager.NavigateTo("destinations");
            }
        }
        else
        {
            Snackbar.Add("Täytä tekstikentät muokataksesi matkakohdetta", Severity.Warning);
        }
        
    }

    // Image stuff
    private async Task LoadImage(IBrowserFile file)
    {
        using Stream imageStream = file.OpenReadStream(1024 * 1024 * 10);

        using MemoryStream ms = new();
        await imageStream.CopyToAsync(ms);
        var asBytes = ms.ToArray();

        ImageUri = $"data:image/png;base64,{Convert.ToBase64String(asBytes)}";
        destinationDto.Image = asBytes;
        StateHasChanged();
    }

    private string BytesToBase64Image(byte[]? bytes)
    {
        if (bytes is null) return "";
        return $"data:image/png;base64,{Convert.ToBase64String(bytes)}";
    }
}