@page "/profile"
@inject StateContainer State
@inject ISnackbar Snackbar
@attribute [Authorize]
@inject HttpClient Http


<MudContainer Style="overflow-x: auto" MaxWidth="MaxWidth.Large" Class="pa-4 ">
	<MudText Typo="Typo.h2" Class="mb-4" Align="Align.Center">Omat tiedot</MudText>

	

	<EditForm Model="user" OnValidSubmit="HandleSubmit">
		<DataAnnotationsValidator />
		<MudCard>
			<MudCardContent Style="background-color:darkgray">
				<MudTextField Label="Etunimi" @bind-Value="user.FirstName" For="@(() => user.FirstName)" />
				<MudTextField Label="Sukunimi" @bind-Value="user.LastName" For="@(() => user.LastName)" />
				<MudTextField Label="Käyttäjätunnus" @bind-Value="user.Username" For="@(() => user.Username)" />
				<MudTextField Label="Email" Class="mt-3" @bind-Value="user.Email" For="@(() => user.Email)" />
				<MudTextField Label="Kuvaus" Class="mt-3" @bind-Value="user.Description" For="@(() => user.Description)" />
				<MudTextField Label="Paikkakunta" Class="mt-3" @bind-Value="user.Area" For="@(() => user.Area)" />
				
				<MudStack Style="background-color: darkgray" Row="true" Class="mt-4">
					<MudAvatar Size="Size.Large" Image="@ImageUri"></MudAvatar>
					<MudFileUpload T="IBrowserFile" FilesChanged="LoadImage">
						<ButtonTemplate Context="context_">
							<MudButton HtmlTag="label"
							           Variant="Variant.Filled"
							           Color="Color.Primary"
							           StartIcon="@Icons.Material.Filled.CloudUpload"
							           for="@context_">
								Lisää kuva
							</MudButton>
						</ButtonTemplate>
					</MudFileUpload>
				</MudStack>
			</MudCardContent>

			
			
			<MudCardActions Style="background-color:darkgray">
				<MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto">Päivitä profiili</MudButton>
			</MudCardActions>
		</MudCard>
	</EditForm>
</MudContainer>


@code {

    ProfileDto user = new();
    string ImageUri;
   
    private async Task HandleSubmit()
    {
	    var response = await Http.PutAsJsonAsync("/api/Travellers/profile", user);
	    if (response.IsSuccessStatusCode)
	    {
		    State.User = user;
		    Snackbar.Add("Profiili päivitetty", Severity.Success);
	    }
	}

	protected override async Task OnInitializedAsync()
	{
		user  = await Http.GetFromJsonAsync<ProfileDto>("/api/Travellers/profile");
		if (user?.Image is not null)
			ImageUri = BytesToBase64Image(user.Image);

	}

	private async Task LoadImage(IBrowserFile file)
	{
		using Stream imageStream = file.OpenReadStream(1024 * 1024 * 10);

		using MemoryStream ms = new();
		await imageStream.CopyToAsync(ms);
		var asBytes = ms.ToArray();

		ImageUri = $"data:image/png;base64,{Convert.ToBase64String(asBytes)}";
		user.Image = asBytes;
		StateHasChanged();
	}

	private string BytesToBase64Image(byte[] bytes) => $"data:image/png;base64,{Convert.ToBase64String(bytes)}";
	
}
